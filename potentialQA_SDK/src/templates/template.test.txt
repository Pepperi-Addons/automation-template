import GeneralService, { TesterFunctions } from "../../potentialQA_SDK/server_side/general.service";


export async function TemplateTests(generalService: GeneralService, addonService: GeneralService, request, tester: TesterFunctions) {
    const dataObj = request.body.Data; // the 'Data' object passsed inside the http request sent to start the test -- put all the data you need here
    //setting 'mocha verbs' to use
    const describe = tester.describe;
    const expect = tester.expect;
    const it = tester.it;

    describe('TemplateTests Suites', () => { //the string inside the describe will effect the title of this suite in the report
            //templateToTeplaceWithCtor
            let createdUser; // global vars for whole test (used in more than 1 'it') should be created here
            let currentUserQuantity;
            it('Basic Test Example #1: Create User Using Service', async () => { //this will set the test name in report
                // This Is An Example Of How To Write Tests - Using Example Service From Automation Infra - Objects
                /**
                 * your code should replace this
                 */
                const userExternalID = 'Automated API User ' + Math.floor(Math.random() * 1000000).toString();
                const userEmail =
                    'Email' +
                    Math.floor(Math.random() * 1000000).toString() +
                    '@' +
                    Math.floor(Math.random() * 1000000).toString() +
                    '.com';
                createdUser = await servicez.createUser({
                    ExternalID: userExternalID,
                    Email: userEmail,
                    FirstName: Math.random().toString(36).substring(7),
                    LastName: Math.random().toString(36).substring(7),
                    Mobile: Math.floor(Math.random() * 1000000).toString(),
                    Phone: Math.floor(Math.random() * 1000000).toString(),
                    IsInTradeShowMode: true,
                });
                expect(createdUser, 'InternalID').to.have.property('InternalID').that.is.a('number').and.is.above(0);
                expect(createdUser, 'UUID').to.have.property('UUID').that.is.a('string').and.is.not.empty;
                expect(createdUser, 'ExternalID')
                    .to.have.property('ExternalID')
                    .that.is.a('string')
                    .and.equals(userExternalID);
                expect(createdUser, 'Email').to.have.property('Email').that.is.a('string').and.equals(userEmail);
                expect(createdUser, 'FirstName').to.have.property('FirstName').that.is.a('string').and.is.not.empty;
                expect(createdUser, 'LastName').to.have.property('LastName').that.is.a('string').and.is.not.empty;
                expect(createdUser, 'Hidden').to.have.property('Hidden').that.is.a('boolean').and.is.false;
                expect(createdUser, 'IsInTradeShowMode').to.have.property('IsInTradeShowMode').that.is.a('boolean').and.is
                    .true;
                expect(createdUser, 'Mobile').to.have.property('Mobile').that.is.a('string').and.is.not.empty;
                expect(createdUser, 'CreationDateTime')
                    .to.have.property('CreationDateTime')
                    .that.contains(new Date().toISOString().split('T')[0]);
                expect(createdUser, 'CreationDateTime').to.have.property('CreationDateTime').that.contains('Z');
                expect(createdUser, 'ModificationDateTime')
                    .to.have.property('ModificationDateTime')
                    .that.contains(new Date().toISOString().split('T')[0]);
                expect(createdUser, 'ModificationDateTime').to.have.property('ModificationDateTime').that.contains('Z');
            });
            it('Basic Test Example #2: Using Objects Service To Validate Users API Options Functionality', async () => {
                /**
                * your code should replace this
                */
                generalService.sleep(5000);// sleep and other util functions can be found inside 'generalServie'
                const usersList = await servicez.getUsers();
                expect(usersList).to.be.an('array').with.lengthOf.above(0);
                expect(usersList[0], 'InternalID')
                    .to.have.property('InternalID')
                    .that.is.a('number')
                    .and.is.above(0);
                expect(usersList[0], 'UUID').to.have.property('UUID').that.is.a('string').and.is.not.empty;
                expect(usersList[0], 'ExternalID').to.have.property('ExternalID').that.is.a('string');
                expect(usersList[0], 'Email').to.have.property('Email').that.is.a('string').and.is.not.empty;
                expect(usersList[0], 'FirstName').to.have.property('FirstName').that.is.a('string');
                expect(usersList[0], 'LastName').to.have.property('LastName').that.is.a('string');
                expect(usersList[0], 'Hidden').to.have.property('Hidden').that.is.a('boolean').and.is.false;
                expect(usersList[0], 'IsInTradeShowMode').to.have.property('IsInTradeShowMode').that.is.a('boolean');
                expect(usersList[0], 'Mobile').to.have.property('Mobile').that.is.a('string');
                expect(usersList[0], 'CreationDateTime').to.have.property('CreationDateTime').that.contains('Z');
                expect(usersList[0], 'ModificationDateTime')
                    .to.have.property('ModificationDateTime')
                    .that.contains('Z');
                expect(usersList[0], 'Phone').to.have.property('Phone').that.is.a('string');
                expect(usersList[0], 'Profile').to.have.property('Profile').that.is.an('object');
                expect(usersList[0], 'Role').to.have.property('Role');
               // debugger; // you can use either breakpoints or this kind of debugging
               let isUserFound = false;
               for (let index = 0; index < usersList.length; index++) {
                    if (usersList[index].Email === createdUser.Email) {
                    isUserFound = true;
                    }
                }
               expect(isUserFound).to.be.true;
               currentUserQuantity = usersList.length
            });
            
            // !!!IMPORTANT COMMENT: all the resource you set or create - MUST be deleted (!); in this case: we created a user so we delete it and validate that it is
            // in fact was deleted, if you set a code job - you MUST set it off, if you create a scheme you MUST delete it, etc...
            it('Basic Test Example #3: Cleanup Of All Inserted Data', async () => {
                expect(await servicez.deleteUser('InternalID', createdUser.InternalID)).to.be.true;
                expect(await servicez.deleteUser('InternalID', createdUser.InternalID)).to.be.false;
                expect(await servicez.getUsers())
                    .to.be.an('array')
                    .with.lengthOf(currentUserQuantity - 1);
            });

    });
}
